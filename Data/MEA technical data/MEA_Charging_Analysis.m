function result = MEA_Charging_Analysis(void)
    clear;
    tic;
    save_img = 1;
    sFilename = 'EVChargeData.csv';
    iFileLength = 76000;
    % iFileLength = 3000; % Fort estign to save time
    DataFile = importfile(sFilename, 1, iFileLength);
    % 'File Load Complete'
    % toc;

    EV_startSoC = DataFile{:,4}/12;
    EV_endSoC = DataFile{:, 5}/12;
    EV_charge = EV_endSoC - EV_startSoC;




    % Plot Histogram of arrivals SoC
    figure;
    histogram(EV_startSoC)
    xlabel('State of Charge') 
    ylabel('Number of Vehicles') 
    legend('Arrival SoC')  
    legend('Location','southeast')
    s_title = '{\bf\fontsize{14} Arrival SoC distribution of fleet}';
    s_subTitle = 'My Electric Avenue Data' ;
    title( {s_title;s_subTitle},'FontWeight','Normal' ) 
    s_filename = 'MEA Vehicle Start SoC Analysis';
    if save_img
        print(s_filename ,'-dpng')
        close
    end
    

    % Plot Histogram of departures SoC
    figure;
    histogram(EV_endSoC)
    hold off
    xlabel('State of Charge') 
    ylabel('Number of Vehicles') 
    legend('Departure SoC')  
    legend('Location','southeast')
    s_title = '{\bf\fontsize{14} Departure SoC distribution of fleet}';
    s_subTitle = 'My Electric Avenue Data' ;
    title( {s_title;s_subTitle},'FontWeight','Normal' ) 
    s_filename = 'MEA Vehicle End SoC Analysis';
    if save_img
        print(s_filename ,'-dpng')
        close
    end


    % Plot Histogram of departures SoC
    figure;
    histogram(EV_charge)
    hold off
    xlabel('State of Charge') 
    ylabel('Number of Vehicles') 
    legend('Percentage Charged')  
    legend('Location','southeast')
    s_title = '{\bf\fontsize{14} Percent Charge distribution of fleet}';
    s_subTitle = 'My Electric Avenue Data' ;
    title( {s_title;s_subTitle},'FontWeight','Normal' ) 
    s_filename = 'MEA Vehicle Charge Analysis';
    if save_img
        print(s_filename ,'-dpng')
        close
    end

    x = 1;
    Charge_Stats{x,1}  = '';
    Charge_Stats{x,2}  =  'Mean';
    Charge_Stats{x,3}  =  'Standard Deviation';


    temp_var = EV_charge;
    x = 2;
    Charge_Stats{x,1}  = 'Charging';
    Charge_Stats{x,2}  =  mean(temp_var);
    Charge_Stats{x,3}  =  std(temp_var);


    temp_var = EV_startSoC;
    x = 3;
    Charge_Stats{x,1}  = 'Arrival SoC';
    Charge_Stats{x,2}  =  mean(temp_var);
    Charge_Stats{x,3}  =  std(temp_var);


    temp_var = EV_endSoC;
    x = 4;
    Charge_Stats{x,1}  = 'Departure SoC';
    Charge_Stats{x,2}  =  mean(temp_var);
    Charge_Stats{x,3}  =  std(temp_var);

    result = Charge_Stats;

end

function EVChargeData = importfile(filename, startRow, endRow)
        %IMPORTFILE Import numeric data from a text file as a matrix.
        %   EVCHARGEDATA = IMPORTFILE(FILENAME) Reads data from text file FILENAME
        %   for the default selection.
        %
        %   EVCHARGEDATA = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
        %   rows STARTROW through ENDROW of text file FILENAME.
        %
        % Example:
        %   EVChargeData = importfile('EVChargeData.csv', 2, 76699);
        %
        %    See also TEXTSCAN.

        % Auto-generated by MATLAB on 2018/04/24 11:57:30

        %% Initialize variables.
        delimiter = ',';
        if nargin<=2
            startRow = 2;
            endRow = inf;
        end

        %% Read columns of data as text:
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%q%q%q%q%q%[^\n\r]';

        %% Open the text file.
        fileID = fopen(filename,'r','n','UTF-8');
        % Skip the BOM (Byte Order Mark).
        fseek(fileID, 3, 'bof');

        %% Read columns of data according to the format.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
        for block=2:length(startRow)
            frewind(fileID);
            dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
            for col=1:length(dataArray)
                dataArray{col} = [dataArray{col};dataArrayBlock{col}];
            end
        end

        %% Close the text file.
        fclose(fileID);

        %% Convert the contents of columns containing numeric text to numbers.
        % Replace non-numeric text with NaN.
        raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
        for col=1:length(dataArray)-1
            raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
        end
        numericData = NaN(size(dataArray{1},1),size(dataArray,2));

        for col=[1,4,5]
            % Converts text in the input cell array to numbers. Replaced non-numeric
            % text with NaN.
            rawData = dataArray{col};
            for row=1:size(rawData, 1)
                % Create a regular expression to detect and remove non-numeric prefixes and
                % suffixes.
                regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                try
                    result = regexp(rawData(row), regexstr, 'names');
                    numbers = result.numbers;
                    
                    % Detected commas in non-thousand locations.
                    invalidThousandsSeparator = false;
                    if numbers.contains(',')
                        thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                        if isempty(regexp(numbers, thousandsRegExp, 'once'))
                            numbers = NaN;
                            invalidThousandsSeparator = true;
                        end
                    end
                    % Convert numeric text to numbers.
                    if ~invalidThousandsSeparator
                        numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                        numericData(row, col) = numbers{1};
                        raw{row, col} = numbers{1};
                    end
                catch
                    raw{row, col} = rawData{row};
                end
            end
        end

        dateFormatIndex = 1;
        blankDates = cell(1,size(raw,2));
        anyBlankDates = false(size(raw,1),1);
        invalidDates = cell(1,size(raw,2));
        anyInvalidDates = false(size(raw,1),1);
        for col=[2,3]% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
            try
                dates{col} = datetime(dataArray{col}, 'Format', 'yyyy-MM-dd HH:mm:ss.SSS', 'InputFormat', 'yyyy-MM-dd HH:mm:ss.SSS'); %#ok<AGROW>
            catch
                try
                    % Handle dates surrounded by quotes
                    dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
                    dates{col} = datetime(dataArray{col}, 'Format', 'yyyy-MM-dd HH:mm:ss.SSS', 'InputFormat', 'yyyy-MM-dd HH:mm:ss.SSS'); %#ok<AGROW>
                catch
                    dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<AGROW>
                end
            end
            
            dateFormatIndex = dateFormatIndex + 1;
            blankDates{col} = dataArray{col} == '';
            anyBlankDates = blankDates{col} | anyBlankDates;
            invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
            anyInvalidDates = invalidDates{col} | anyInvalidDates;
        end
        dates = dates(:,[2,3]);
        blankDates = blankDates(:,[2,3]);
        invalidDates = invalidDates(:,[2,3]);

        %% Split data into numeric and string columns.
        rawNumericColumns = raw(:, [1,4,5]);

        %% Replace non-numeric cells with NaN
        R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
        rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

        %% Create output variable
        EVChargeData = table;
        EVChargeData.ParticipantID = cell2mat(rawNumericColumns(:, 1));
        EVChargeData.BatteryChargeStartDate = dates{:, 1};
        EVChargeData.BatteryChargeStopDate = dates{:, 2};
        EVChargeData.StartingSoCof12 = cell2mat(rawNumericColumns(:, 2));
        EVChargeData.EndingSoCof12 = cell2mat(rawNumericColumns(:, 3));

        % For code requiring serial dates (datenum) instead of datetime, uncomment
        % the following line(s) below to return the imported dates as datenum(s).

        % EVChargeData.BatteryChargeStartDate=datenum(EVChargeData.BatteryChargeStartDate);EVChargeData.BatteryChargeStopDate=datenum(EVChargeData.BatteryChargeStopDate);

end